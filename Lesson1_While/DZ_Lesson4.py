# Пересечение двух неупорядоченных наборов целых чисел

# Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# Выдать без повторений в порядке возрастания все те числа, которые встречаются 
# в обоих наборах.
# На вход подается 2 числа через пробел: n m
# n - кол-во элементов первого множества.
# m - кол-во элементов второго множества.
# Затем подаются элементы каждого множества через пробел в виде строки. ! Писать input() не надо

# Пример
# На входе:
# var1 = '5 4' # количество элементов первого и второго множества
# var2 = '1 3 5 7 9' # элементы первого множества через пробел
# var3 = '2 3 4 5' # элементы второго множества через пробел
# На выходе: 3 5

var1 = '5 4' # количество элементов первого и второго множества
var2 = '1 3 5 7 9' # элементы первого множества через пробел
var3 = '2 3 4 5' # элементы второго множества через пробел

# преобразуем входные данные в список
n, m = map(int, var1.split())
set1 = set(map(int, var2.split()))
set2 = set(map(int, var3.split()))

# используем операцию пересечения множеств для нахождения общих элементов
result_set = set1.intersection(set2)

# выводим элементы отсортированные в порядке возрастания
print(*sorted(result_set))

# Конечно, давайте разберем предложенный код по шагам:

# 1. n, m = map(int, var1.split()) - здесь мы разделяем строку var1 на отдельные 
# элементы (количество элементов первого и второго множества) и преобразуем их в 
# целые числа, используя split() для разделения строки по пробелу и map(int, ...) 
# для преобразования каждого элемента в целое число.

# 2. set1 = set(map(int, var2.split())) - здесь мы разделяем строку var2 на отдельные 
# элементы, преобразуем их в целые числа, а затем создаем множество (set) из полученных 
# целых чисел.

# 3. set2 = set(map(int, var3.split())) - аналогично предыдущему пункту, только для var3.

# 4. result_set = set1.intersection(set2) - здесь мы находим пересечение двух множеств 
# (т.е. общие элементы) с помощью метода intersection() и сохраняем результат в result_set.

# 5. print(*sorted(result_set)) - сначала мы сортируем элементы множества result_set 
# в порядке возрастания с помощью sorted(), затем при помощи * распаковываем 
# отсортированные элементы и выводим их с использованием print().

# Таким образом, программа принимает количество элементов и сами элементы двух множеств, 
# затем находит общие элементы и выводит их без повторений в порядке возрастания.

